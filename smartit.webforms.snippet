<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>SmartIT DAO Class</Title>
      <Shortcut>SmartIT_DAO_class</Shortcut>
      <Author>Eduardo Claudio Nicacio</Author>
      <Description>Public DAO class using the SmartIT.Library</Description>
      <SnippetTypes>
        <SnippetType>SurroundsWith</SnippetType>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <References>
        <Reference>
          <Assembly>SmartIT.Library.Data.dll</Assembly>
        </Reference>
      </References>
      <Imports>
        <Import>
          <Namespace>SmartIT.Library.Data</Namespace>
        </Import>
        <Import>
          <Namespace>SmartIT.Library.Data.DAL</Namespace>
        </Import>
        <Import>
          <Namespace>SmartPortal.Business.Model.Enum</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Data.SqlClient</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>EntityName</ID>
          <ToolTip>Entity name.</ToolTip>
          <Default>EntityName</Default>
        </Literal>
        <Literal Editable="true">
          <ID>EntityTableName</ID>
          <ToolTip>Table name.</ToolTip>
          <Default>EntityTableName</Default>
        </Literal>
        <Literal Editable="true">
          <ID>ConnectionStringName</ID>
          <ToolTip>ConnectionString name.</ToolTip>
          <Type>System.String</Type>
          <Default>DefaultConnection</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="type decl">
        <![CDATA[
            /// <summary>
            /// Data access layer of the $EntityName$ entities.
            /// </summary>
            [ActiveConnection("$ConnectionStringName$")]
            public class $EntityName$Dao : DaoBase<$EntityName$Dao> : IDao<$EntityName$Model>
            {            
                /// <summary>
                /// Initializes a new instance of the <see cref="$EntityName$Dao" /> class.
                /// </summary>
                public $EntityName$Dao() 
                    : base()
                {
                }
            
                /// <summary>
                /// Inserts a new registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public int Insert($EntityName$Model obj)
                {				
					          SqlCommand cmd = new SqlCommand();

					          cmd.CommandType = System.Data.CommandType.StoredProcedure;
					          cmd.CommandText = "dbo.usp_$EntityTableName$Insert";

                    cmd.Parameters.AddWithValue("@Status", obj.Status.HasValue ? obj.Status : DbNullHelper.GetValue(0));
                    cmd.Parameters.AddWithValue("@CreationDate", DbNullHelper.GetValue(obj.CreationDate));
                    cmd.Parameters.AddWithValue("@CreationUser", DbNullHelper.GetValue(obj.CreationUser));
                    cmd.Parameters.AddWithValue("@CreationProgram", DbNullHelper.GetValue(obj.CreationProgram));

					          return DbHelper.ExecuteNonQuery(cmd);
                }
        
                /// <summary>
                /// Updates an existing registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public int Update($EntityName$Model obj)
                {
					          SqlCommand cmd = new SqlCommand();

					          cmd.CommandType = System.Data.CommandType.StoredProcedure;
					          cmd.CommandText = "dbo.usp_$EntityTableName$Update";

					          cmd.Parameters.AddWithValue("@$EntityName$ID", DbNullHelper.GetValue(obj.Id));
                    cmd.Parameters.AddWithValue("@Status", obj.Status.HasValue ? obj.Status : DbNullHelper.GetValue(0));
                    cmd.Parameters.AddWithValue("@UpdateDate", DbNullHelper.GetValue(obj.UpdateDate));
                    cmd.Parameters.AddWithValue("@UpdateUser", DbNullHelper.GetValue(obj.UpdateUser));
                    cmd.Parameters.AddWithValue("@UpdateProgram", DbNullHelper.GetValue(obj.UpdateProgram));

					          return DbHelper.ExecuteNonQuery(cmd);
                }
        
                /// <summary>
                /// Deletes an existing registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public int Delete($EntityName$Model obj)
                {
					          SqlCommand cmd = new SqlCommand();

					          cmd.CommandType = System.Data.CommandType.StoredProcedure;
					          cmd.CommandText = "dbo.usp_$EntityTableName$Delete";

					          cmd.Parameters.AddWithValue("@$EntityName$ID", DbNullHelper.GetValue(obj.Id));

					          return DbHelper.ExecuteNonQuery(cmd);
                }
        
                /// <summary>
                /// /// Returns a list of $EntityName$ Model according with the search criteria.
                /// </summary>
                /// <param name="criteria"> Search criteria.</param>
                /// <returns> List of $EntityName$ Model.</returns>
                public List<$EntityName$Model> Search(Dictionary<string, object> criteria)
                {
                    string SQL = @" SET DATEFORMAT dmy
                    
                                    SELECT $EntityName$ID
							                            ,Status
							                            ,CreationDate
							                            ,CreationUser
							                            ,CreationProgram
							                            ,UpdateDate
							                            ,UpdateUser
							                            ,UpdateProgram
                                      FROM dbo.$EntityTableName$ 
                                      {0}
                                  ORDER BY $EntityName$ID ";
                    
                    Dictionary<string, string> alias = new Dictionary<string, string>();
					
                    alias.Add("Id", "$EntityName$ID");
                    alias.Add("Status", "Status");
                    
                    return (List<$EntityName$Model>)SqlSearch(criteria, alias, SQL);
                }
				
				        /// <summary>
				        /// Returns a list of $EntityName$ Model according with the search criteria.
				        /// </summary>
				        /// <param name="obj"> $EntityName$ Model.</param>
				        /// <returns> List of $EntityName$ Model.</returns>
				        public List<$EntityName$Model> Search($EntityName$Model obj)
				        {
					          SqlCommand cmd = new SqlCommand();

					          cmd.CommandType = System.Data.CommandType.StoredProcedure;
					          cmd.CommandText = "dbo.usp_$EntityTableName$Retrieve";

					          cmd.Parameters.AddWithValue("@$EntityName$ID", DbNullHelper.GetValue(obj.Id));
                    cmd.Parameters.AddWithValue("@Status", obj.Status.HasValue ? obj.Status : DbNullHelper.GetValue(0));

					          return (List<$EntityName$Model>)SqlSearch(cmd);
				        }
                                
                /// <summary>
                /// Returns a list with all results returned by the reader. See also <seealso cref="SafeDataReader"/>.
                /// </summary>
                /// <param name="reader">Safe Data Reader.</param>
                /// <returns> List of $EntityName$ Model.</returns>
                protected override object GetList(ref SafeDataReader reader)
                {
                    List<$EntityName$Model> list = new List<$EntityName$Model>();
					
                    while (reader.Read())
                    {
                        $EntityName$Model obj = new $EntityName$Model();
        
                        obj.Id = reader.GetInt32("Id");
                        obj.Status = (StatusEnum)reader.GetInt32("Status");
                        obj.CreationDate = reader.GetDateTime("CreationDate");
                        obj.CreationProgram = reader.GetString("CreationProgram");
                        obj.CreationUser = reader.GetString("CreationUser");
                        obj.UpdateDate = reader.GetDateTime("UpdateDate");
                        obj.UpdateProgram = reader.GetString("UpdateProgram");
                        obj.UpdateUser = reader.GetString("UpdateUser");
                
                        list.Add(obj);        
                    }        
					
                    return list;
                }                
            }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>SmartIT BLL Class</Title>
      <Shortcut>SmartIT_BLL_class</Shortcut>
      <Author>Eduardo Claudio Nicacio</Author>
      <Description>Public BLL class using SmartIT.Library</Description>
      <SnippetTypes>
        <SnippetType>SurroundsWith</SnippetType>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>SmartIT.Library.Data</Namespace>
        </Import>
        <Import>
          <Namespace>SmartIT.Library.Data.ModelManager</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>EntityName</ID>
          <ToolTip>Entity name.</ToolTip>
          <Default>EntityName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="type decl">
        <![CDATA[
            /// <summary>
            /// Business and logic layer of the $EntityName$ entities.
            /// </summary>
            public class $EntityName$Bll : ManagerBase<$EntityName$Dao>
            {          
                /// <summary>
                /// Inserts a new registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public static int Insert($EntityName$Model obj)
                {                    
                    // Remember to implement the business rules
                    return ValidateModel(obj) ? EntityDb.Insert(obj) : 1;
                }
                
                /// <summary>
                /// Updates an existing registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public static int Update($EntityName$Model obj)
                {    
                    // Remember to implement the business rules
					          return obj.Id > 0 && ValidateModel(obj) ? EntityDb.Update(obj) : 1;
                }
                
                /// <summary>
                /// Deletes an existing registry.
                /// </summary>
                /// <param name="obj"> $EntityName$ Model.</param>
                /// <returns> Returns 0 (zero) in case of success; or 1 instead.</returns>
                public static int Delete($EntityName$Model obj)
                {    
                    // Remember to implement the business rules 
                    return obj.Id > 0 ? EntityDb.Delete(obj) : 1;
                }

                /// <summary>
                /// Returns a list of $EntityName$ Model according with the search criteria.
                /// </summary>
                /// <returns>List of $EntityName$ Model</returns>
                public static List<$EntityName$Model> Search()
                {
                    return EntityDb.Search(SearchCriteria);
                }
				
				        /// <summary>
				        /// Returns a list of $EntityName$ Model that matches the object used as a filter.
				        /// </summary>
				        /// <param name="obj"> $EntityName$ Model.</param>
				        /// <returns> List of $EntityName$ Model.</returns>
				        public static List<$EntityName$Model> Search($EntityName$Model obj)
				        {
					          return EntityDb.Search(obj);
				        }
        
                /// <summary>
                /// Returns a specific $EntityName$.
                /// </summary>
                /// <param name="$EntityName$"> $EntityName$ Model searched.</param>
                /// <returns> $EntityName$ Model found, if any, or null.</returns>
                public static $EntityName$Model SearchItem($EntityName$Model obj)
                {
                    return Search().AsQueryable().Where(x => x.Id.Equals(obj.Id)).FirstOrDefault();
                }  
                
                /// <summary>
                /// Validates a/an $EntityName$ according with the Database not null rules.
                /// </summary>
                /// <param name="obj">$EntityName$ Model.</param>
                /// <returns> True, if it's a valid model; false instead.</returns>
                public static bool ValidateModel($EntityName$Model obj)
                {
                    return !(obj == null
                        || !obj.Status.HasValue
                        || obj.CreationDate.Equals(DateTime.MinValue)
                        || string.IsNullOrWhiteSpace(obj.CreationProgram)
                        || string.IsNullOrWhiteSpace(obj.CreationUser));
                }
            }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
